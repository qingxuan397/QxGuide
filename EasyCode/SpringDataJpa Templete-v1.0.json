{"author":"611001","version":"1.2.4","userSecure":"","currTypeMapperGroupName":"Default","currTemplateGroupName":"SpringDataJpa","currColumnConfigGroupName":"Default","currGlobalConfigGroupName":"Default","typeMapper":{"Default":{"name":"Default","elementList":[{"matchType":"REGEX","columnType":"varchar(\\(\\d+\\))?","javaType":"java.lang.String"},{"matchType":"REGEX","columnType":"char(\\(\\d+\\))?","javaType":"java.lang.String"},{"matchType":"REGEX","columnType":"(tiny|medium|long)*text","javaType":"java.lang.String"},{"matchType":"REGEX","columnType":"decimal(\\(\\d+,\\d+\\))?","javaType":"java.lang.Double"},{"matchType":"ORDINARY","columnType":"integer","javaType":"java.lang.Integer"},{"matchType":"REGEX","columnType":"(tiny|small|medium)*int(\\(\\d+\\))?","javaType":"java.lang.Integer"},{"matchType":"ORDINARY","columnType":"int4","javaType":"java.lang.Integer"},{"matchType":"ORDINARY","columnType":"int8","javaType":"java.lang.Long"},{"matchType":"REGEX","columnType":"bigint(\\(\\d+\\))?","javaType":"java.lang.Long"},{"matchType":"ORDINARY","columnType":"date","javaType":"java.util.Date"},{"matchType":"ORDINARY","columnType":"datetime","javaType":"java.util.Date"},{"matchType":"ORDINARY","columnType":"timestamp","javaType":"java.util.Date"},{"matchType":"ORDINARY","columnType":"time","javaType":"java.time.LocalTime"},{"matchType":"ORDINARY","columnType":"boolean","javaType":"java.lang.Boolean"},{"matchType":"ORDINARY","columnType":"datetime(3)","javaType":"java.util.Date"},{"matchType":"REGEX","columnType":"tinyint((\\d+))? unsigned","javaType":"java.lang.Integer"}]}},"template":{"SpringDataJpa":{"name":"SpringDataJpa","elementList":[{"name":"entity.java.vm","code":"##导入宏定义\n$!{define.vm}\n\n##保存文件（宏定义）\n#save(\"/model/entity\", \".java\")\n\n##包路径（宏定义）\n#setPackageSuffix(\"model.entity\")\n\n##自动导入包（全局变量）\n$!{autoImport.vm}\nimport lombok.Data;\nimport org.hibernate.annotations.GenericGenerator;\nimport javax.persistence.*;\nimport java.io.Serializable;\nimport org.springframework.data.annotation.CreatedDate;\nimport org.springframework.data.annotation.LastModifiedDate;\nimport org.springframework.data.jpa.domain.support.AuditingEntityListener;\n\n##使用宏定义实现类注释信息\n#tableComment(\"实体类\")\n@Data\n@Entity\n@Table(name = \"$!{tableInfo.obj.name}\")\n@EntityListeners(AuditingEntityListener.class)\npublic class $!{tableInfo.name} implements Serializable {\n    private static final long serialVersionUID = $!tool.serial();\n    \n#foreach($column in $tableInfo.pkColumn)\n    @Id\n    @Column(name =\"$!{column.obj.name}\")\n    @GenericGenerator(name=\"systemUUID\",strategy=\"uuid\")\n    @GeneratedValue(generator=\"systemUUID\")\n    private $!{tool.getClsNameByFullName($column.type)} $!{column.name};\n#end\n    \n#foreach($column in $tableInfo.otherColumn)\n#if(${column.comment})\n    /**\n     * ${column.comment}\n     */\n#end\n#if($!{column.obj.name} == \"created_date\")\n    @CreatedDate\n#elseif($!{column.obj.name} == \"last_modified_date\")\n    @LastModifiedDate\n#end\n    @Column(name = \"$!{column.obj.name}\")\n    private $!{tool.getClsNameByFullName($column.type)} $!{column.name};\n\n#end\n}"},{"name":"vo.java.vm","code":"##导入宏定义\n$!{define.vm}\n\n##设置表后缀（宏定义）\n#setTableSuffix(\"VO\")\n\n##保存文件（宏定义）\n#save(\"/model/vo\", \"VO.java\")\n\n##包路径（宏定义）\n#setPackageSuffix(\"model.vo\")\n\n##自动导入包（全局变量）\n$!{autoImport.vm}\nimport lombok.Data;\nimport java.io.Serializable;\nimport io.swagger.annotations.ApiModelProperty;\n\n\n##使用宏定义实现类注释信息\n#tableComment(\"VO\")\n@Data\npublic class $!{tableName} implements Serializable {\n    private static final long serialVersionUID = $!tool.serial();\n    \n#foreach($column in $tableInfo.fullColumn)\n#if(${column.comment})\n    @ApiModelProperty(\"${column.comment}\")\n#end\n#if($column.type.equals(\"java.util.Date\"))\n    @JsonFormat(pattern=\"yyyy-MM-dd HH:mm:ss\")\n#end    \n    private $!{tool.getClsNameByFullName($column.type)} $!{column.name};\n    \n#end\n}"},{"name":"dto.java.vm","code":"##导入宏定义\n$!{define.vm}\n\n##设置表后缀（宏定义）\n#setTableSuffix(\"DTO\")\n\n##保存文件（宏定义）\n#save(\"/model/dto\", \"DTO.java\")\n\n##包路径（宏定义）\n#setPackageSuffix(\"model.dto\")\n\n##自动导入包（全局变量）\n$!{autoImport.vm}\nimport lombok.Data;\nimport java.io.Serializable;\nimport io.swagger.annotations.ApiModelProperty;\n\n\n##使用宏定义实现类注释信息\n#tableComment(\"DTO\")\n@Data\npublic class $!{tableName} implements Serializable {\n    private static final long serialVersionUID = $!tool.serial();\n    \n#foreach($column in $tableInfo.fullColumn)\n#if(${column.comment})\n    @ApiModelProperty(\"${column.comment}\")\n#end\n#if($column.type.equals(\"java.util.Date\"))\n    @DateTimeFormat(pattern=\"yyyy-MM-dd HH:mm:ss\")\n#end    \n    private $!{tool.getClsNameByFullName($column.type)} $!{column.name};\n         \n#end\n}"},{"name":"repository.java.vm","code":"##导入宏定义\n$!{define.vm}\n\n##设置表后缀（宏定义）\n#setTableSuffix(\"Repository\")\n\n##保存文件（宏定义）\n#save(\"/repository\", \"Repository.java\")\n\n##包路径（宏定义）\n#setPackageSuffix(\"repository\")\n\n##拿到主键\n#if(!$tableInfo.pkColumn.isEmpty())\n    #set($pk = $tableInfo.pkColumn.get(0))\n#end\n\nimport $!{tableInfo.savePackageName}.model.entity.$!tableInfo.name;\nimport org.springframework.data.jpa.repository.JpaRepository;\nimport org.springframework.data.jpa.repository.JpaSpecificationExecutor;\nimport org.springframework.stereotype.Repository;\n\n##表注释（宏定义）\n#tableComment(\"表数据库访问层\")\n@Repository\npublic interface $!{tableName} extends JpaRepository<$!tableInfo.name, $!pk.shortType>, JpaSpecificationExecutor<$!tableInfo.name> {\n\n}"},{"name":"service.java.vm","code":"##导入宏定义\n$!{define.vm}\n\n##设置表后缀（宏定义）\n#setTableSuffix(\"Service\")\n\n##保存文件（宏定义）\n#save(\"/service\", \"Service.java\")\n\n##包路径（宏定义）\n#setPackageSuffix(\"service\")\n\n##拿到主键\n#if(!$tableInfo.pkColumn.isEmpty())\n    #set($pk = $tableInfo.pkColumn.get(0))\n#end\n\nimport $!{tableInfo.savePackageName}.repository.$!{tableInfo.name}Repository;\nimport $!{tableInfo.savePackageName}.converter.$!{tableInfo.name}Converter;\nimport $!{tableInfo.savePackageName}.model.entity.$!{tableInfo.name};\nimport $!{tableInfo.savePackageName}.model.dto.$!{tableInfo.name}DTO;\nimport $!{tableInfo.savePackageName}.model.vo.$!{tableInfo.name}VO;\nimport $!{tableInfo.savePackageName}.model.query.PageQuery;\nimport $!{tableInfo.savePackageName}.model.query.$!{tableInfo.name}Query;\n\nimport com.nd.gaea.uranus.gql.PagerResult;\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.data.domain.Page;\nimport org.springframework.data.domain.Pageable;\nimport org.springframework.data.jpa.domain.Specification;\nimport org.springframework.stereotype.Service;\nimport javax.annotation.Resource;\nimport javax.persistence.criteria.Order;\nimport javax.persistence.criteria.Predicate;\nimport java.util.ArrayList;\nimport java.util.List;\n\nimport com.nd.elearning.preschool.report.vaccine.utils.PagingUtil;\nimport com.nd.elearning.preschool.oa.service.controller.vo.ExportResult;\nimport com.nd.elearning.preschool.oa.service.util.EasyPoiUtils;\nimport org.springframework.transaction.annotation.Transactional;\n\n##表注释（宏定义）\n#tableComment(\"业务层\")\n@Slf4j\n@Service(\"$!tool.firstLowerCase($tableInfo.name)Service\")\npublic class $!{tableName} {\n    @Resource\n    private $!{tableInfo.name}Repository $!{tool.firstLowerCase($tableInfo.name)}Repository;\n    \n    /**\n     * 分页查询\n     *\n     * @param $!{tool.firstLowerCase($tableInfo.name)}Query 查询条件\n     * @return 结果集\n     */    \n    public PagerResult<$!{tableInfo.name}> list$!{tableInfo.name}($!{tableInfo.name}Query $!tool.firstLowerCase($tableInfo.name)Query, PageQuery pageQuery) {\n        List<$!{tableInfo.name}> $!{tool.firstLowerCase($tableInfo.name)}List = new ArrayList();\n        \n        Specification<$!{tableInfo.name}> specification = (root, criteriaQuery, criteriaBuilder) -> {\n            List<Predicate> predicates = new ArrayList<>();\n            //if (StringUtils.isNotBlank(query.getSchoolId())) {\n            //    predicates.add(criteriaBuilder.equal(root.get(\"schoolId\"), query.getSchoolId()));\n            //}\n\n            Predicate[] p = new Predicate[predicates.size()];\n            criteriaQuery.where(predicates.toArray(p));\n            List<Order> orders = new ArrayList<>();\n            orders.add(criteriaBuilder.desc(root.get(\"createdDate\")));\n            criteriaQuery.orderBy(orders);\n            return criteriaQuery.getRestriction();\n        };\n        \n        Pageable pageable = pageQuery != null ? PagingUtil.getPage(pageQuery.getOffset(), pageQuery.getLimit()) : null;\n        Page<$!{tableInfo.name}> page = $!{tool.firstLowerCase($tableInfo.name)}Repository.findAll(specification, pageable);\n        \n        PagerResult<$!{tableInfo.name}> result = new PagerResult<>();\n        result.setTotal((int) page.getTotalElements());\n        result.setItems(page.getContent());\n        return result;\n    }\n    \n    /**\n     * 导出\n     *\n     * @param   $!{tool.firstLowerCase($tableInfo.name)}Query 查询条件\n     * @return  ExportResult\n     */    \n    public ExportResult export$!{tableInfo.name}($!{tableInfo.name}Query $!{tool.firstLowerCase($tableInfo.name)}Query) {\n        PagerResult<$!{tableInfo.name}> $!{tool.firstLowerCase($tableInfo.name)}Page = this.list$!{tableInfo.name}($!{tool.firstLowerCase($tableInfo.name)}Query, null);\n        List<$!{tableInfo.name}VO> $!{tool.firstLowerCase($tableInfo.name)}VOList = $!{tableInfo.name}Converter.INSTANCE.ofListVO($!{tool.firstLowerCase($tableInfo.name)}Page.getItems());\n\n        String downloadUrl = EasyPoiUtils.exportExcelToCs($!{tool.firstLowerCase($tableInfo.name)}VOList, null, \"xx\",\n                $!{tableInfo.name}VO.class, \"xx\", true, null);\n        return new ExportResult(downloadUrl);\n    }\n\n    /**\n     * 根据主键$!{pk.name}查询\n     *\n     * @param   $!{pk.name} 主键$!{pk.name}\n     * @return  $!{tableInfo.name}\n     */\n    public $!{tableInfo.name} get$!{tableInfo.name}($!pk.shortType $!pk.name) {\n        return this.$!{tool.firstLowerCase($!{tableInfo.name})}Repository.getOne($!pk.name);\n    }\n    \n    /**\n     * 新增\n     *\n     * @param $!{tool.firstLowerCase($tableInfo.name)}DTO\n     * @return 主键\n     */\n    @Transactional\n    public $!pk.shortType create$!{tableInfo.name}($!{tableInfo.name}DTO $!{tool.firstLowerCase($tableInfo.name)}DTO) {\n        $!{tableInfo.name} $!{tool.firstLowerCase($tableInfo.name)} = $!{tableInfo.name}Converter.INSTANCE.ofCreate($!{tool.firstLowerCase($tableInfo.name)}DTO);\n        this.$!{tool.firstLowerCase($!{tableInfo.name})}Repository.save($!{tool.firstLowerCase($tableInfo.name)});\n        return $!{tool.firstLowerCase($tableInfo.name)}.get$!{tool.firstUpperCase($!pk.name)}();\n    }\n    \n    /**\n     * 编辑\n     *\n     * @param $!{tool.firstLowerCase($tableInfo.name)}DTO\n     */\n    @Transactional \n    public void update$!{tableInfo.name}($!{tableInfo.name}DTO $!{tool.firstLowerCase($tableInfo.name)}DTO) {\n        $tableInfo.name $!{tool.firstLowerCase($tableInfo.name)} = this.$!{tool.firstLowerCase($!{tableInfo.name})}Repository.getOne($!{tool.firstLowerCase($tableInfo.name)}DTO.get$!{tool.firstUpperCase($!pk.name)}());\n        if ($!{tool.firstLowerCase($tableInfo.name)} == null) {\n            throw new BizException(\"\", \"$!{tableInfo.comment}不存在\");\n        }\n        \n        $!{tableInfo.name}Converter.INSTANCE.ofUpdate($!{tool.firstLowerCase($tableInfo.name)}DTO, $!{tool.firstLowerCase($tableInfo.name)});\n        this.$!{tool.firstLowerCase($!{tableInfo.name})}Repository.save($!{tool.firstLowerCase($tableInfo.name)});\n    }\n    \n    /**\n     * 根据主键$!{pk.name}删除\n     *\n     * @param   $!{pk.name} 主键$!{pk.name}\n     */\n    @Transactional\n    public void delete$!{tableInfo.name}($!pk.shortType $!pk.name) {\n        this.$!{tool.firstLowerCase($!{tableInfo.name})}Repository.delete($!pk.name);\n    }\n\n}"},{"name":"query.java.vm","code":"##导入宏定义\n$!{define.vm}\n\n##设置表后缀（宏定义）\n#setTableSuffix(\"Query\")\n\n##保存文件（宏定义）\n#save(\"/model/query\", \"Query.java\")\n\n##包路径（宏定义）\n#setPackageSuffix(\"model.query\")\n\n##自动导入包（全局变量）\n$!{autoImport.vm}\nimport lombok.Data;\nimport java.io.Serializable;\nimport io.swagger.annotations.ApiModelProperty;\n\n\n##使用宏定义实现类注释信息\n#tableComment(\"Query类\")\n@Data\npublic class $!{tableName} implements Serializable {\n    private static final long serialVersionUID = $!tool.serial();\n    \n#foreach($column in $tableInfo.fullColumn)\n#if(${column.comment})\n    @ApiModelProperty(\"${column.comment}\")\n#end    \n    private $!{tool.getClsNameByFullName($column.type)} $!{column.name};\n         \n#end\n}"},{"name":"controller.java.vm","code":"##导入宏定义\n$!{define.vm}\n\n##设置表后缀（宏定义）\n#setTableSuffix(\"Controller\")\n\n##保存文件（宏定义）\n#save(\"/controller\", \"Controller.java\")\n\n##包路径（宏定义）\n#setPackageSuffix(\"controller\")\n\n##拿到主键\n#if(!$tableInfo.pkColumn.isEmpty())\n    #set($pk = $tableInfo.pkColumn.get(0))\n#end\n\n##自动导入包（全局变量）\n$!{autoImport.vm}\nimport lombok.Data;\nimport java.io.Serializable;\nimport io.swagger.annotations.Api;\nimport io.swagger.annotations.ApiModelProperty;\nimport io.swagger.annotations.ApiOperation;\nimport io.swagger.annotations.ApiParam;\nimport org.springframework.web.bind.annotation.*;\n\nimport javax.validation.Valid;\nimport javax.annotation.Resource;\nimport $!{tableInfo.savePackageName}.model.entity.$!{tableInfo.name};\nimport $!{tableInfo.savePackageName}.model.dto.$!{tableInfo.name}DTO;\nimport $!{tableInfo.savePackageName}.model.vo.$!{tableInfo.name}VO;\nimport $!{tableInfo.savePackageName}.model.query.$!{tableInfo.name}Query;\nimport $!{tableInfo.savePackageName}.service.$!{tableInfo.name}Service;\nimport $!{tableInfo.savePackageName}.converter.$!{tableInfo.name}Converter;\nimport $!{tableInfo.savePackageName}.model.query.PageQuery;\nimport com.nd.gaea.uranus.gql.PagerResult;\n\nimport com.nd.elearning.preschool.oa.service.controller.vo.ExportResult;\n\n\n##使用宏定义实现类注释信息\n#tableComment(\"控制层\")\n@Api(\"$!{tableInfo.comment}相关接口\")\n@RestController\n@RequestMapping(\"/v1.0/$!tool.firstLowerCase($tableInfo.name)s\")\npublic class $!{tableName} {\n    @Resource\n    private $!{tableInfo.name}Service $!tool.firstLowerCase($tableInfo.name)Service;\n    \n    @ApiOperation(\"查询列表\")\n    @GetMapping(value = \"/\")\n    public PagerResult<$!{tableInfo.name}VO> list$!{tableInfo.name} (\n            @RequestParam(value = \"school_id\", required = false) @ApiParam(value = \"学校id\", required = true) String schoolId,\n            //...\n            @RequestParam(value = \"offset\", required = false, defaultValue = \"0\") @ApiParam(\"分页参数\") Integer offset,\n            @RequestParam(value = \"limit\", required = false, defaultValue = \"10\") @ApiParam(\"分页参数\") Integer limit) {\n        \n        $!{tableInfo.name}Query $!{tool.firstLowerCase($tableInfo.name)}Query = new $!{tableInfo.name}Query();\n        // set\n\n        PageQuery pageQuery = new PageQuery();\n        pageQuery.setOffset(offset);\n        pageQuery.setLimit(limit); \n    \n        PagerResult<$!{tableInfo.name}> pager = this.$!{tool.firstLowerCase($tableInfo.name)}Service.list$!{tableInfo.name}($!{tool.firstLowerCase($tableInfo.name)}Query, pageQuery);\n        PagerResult<$!{tableInfo.name}VO> result = new PagerResult<>();\n        result.setTotal(pager.getTotal());\n        result.setItems($!{tableInfo.name}Converter.INSTANCE.ofListVO(pager.getItems()));\n        return result;\n    }\n    \n    @ApiOperation(\"导出\")\n    @GetMapping(value = \"/export\")\n    public ExportResult export$!{tableInfo.name} (\n            @RequestParam(value = \"school_id\", required = false) @ApiParam(value = \"学校id\", required = true) String schoolId) {\n        \n        $!{tableInfo.name}Query $!{tool.firstLowerCase($tableInfo.name)}Query = new $!{tableInfo.name}Query();\n        // set\n\n        return this.$!{tool.firstLowerCase($tableInfo.name)}Service.export$!{tableInfo.name}($!{tool.firstLowerCase($tableInfo.name)}Query);\n    }\n    \n    @ApiOperation(\"查询详情\") \n    @GetMapping(value = \"/{$!pk.name}\")\n    public $!{tableInfo.name}VO get$!{tableInfo.name}(@PathVariable(\"$!pk.name\") @ApiParam(\"$!pk.comment\") $!pk.shortType $!pk.name) {\n        $!{tableInfo.name} $!{tool.firstLowerCase($!{tableInfo.name})}Record = this.$!{tool.firstLowerCase($tableInfo.name)}Service.get$!{tableInfo.name}($!pk.name);\n        return $!{tableInfo.name}Converter.INSTANCE.ofVO($!{tool.firstLowerCase($!{tableInfo.name})}Record);\n    }\n\n    @ApiOperation(\"新增\")\n    @PostMapping(value = \"\")\n    public $!pk.shortType add(@Valid @RequestBody $!{tableInfo.name}DTO $!{tool.firstLowerCase($tableInfo.name)}DTO) {\n        return this.$!{tool.firstLowerCase($tableInfo.name)}Service.create$!{tableInfo.name}($!{tool.firstLowerCase($tableInfo.name)}DTO);\n    }\n    \n    @ApiOperation(\"编辑\")\n    @PutMapping(value = \"/{$!pk.name}\")\n    public void edit(@PathVariable(\"$!pk.name\") @ApiParam(\"$!pk.comment\") $!pk.shortType $!pk.name,\n                     @Valid @RequestBody $!{tableInfo.name}DTO $!{tool.firstLowerCase($tableInfo.name)}DTO) {\n        $!{tool.firstLowerCase($tableInfo.name)}DTO.set$!{tool.firstUpperCase($!pk.name)}($!pk.name);\n        this.$!{tool.firstLowerCase($tableInfo.name)}Service.update$!{tableInfo.name}($!{tool.firstLowerCase($tableInfo.name)}DTO);\n    }\n    \n    @ApiOperation(\"删除\")\n    @DeleteMapping(value = \"/{$!pk.name}\")\n    public void delete(@PathVariable(\"$!pk.name\") @ApiParam(\"$!pk.comment\") $!pk.shortType $!pk.name) {\n        this.$!{tool.firstLowerCase($tableInfo.name)}Service.delete$!{tableInfo.name}($!pk.name);\n    }\n}"},{"name":"converter.java.vm","code":"##导入宏定义\n$!{define.vm}\n\n##设置表后缀（宏定义）\n#setTableSuffix(\"Converter\")\n\n##保存文件（宏定义）\n#save(\"/converter\", \"Converter.java\")\n\n##包路径（宏定义）\n#setPackageSuffix(\"converter\")\n\n##自动导入包（全局变量）\n$!{autoImport.vm}\n\nimport org.mapstruct.BeanMapping;\nimport org.mapstruct.Mapper;\nimport org.mapstruct.MappingTarget;\nimport org.mapstruct.NullValuePropertyMappingStrategy;\nimport org.mapstruct.factory.Mappers;\nimport $!{tableInfo.savePackageName}.model.entity.$!{tableInfo.name};\nimport $!{tableInfo.savePackageName}.model.dto.$!{tableInfo.name}DTO;\nimport $!{tableInfo.savePackageName}.model.vo.$!{tableInfo.name}VO;\nimport java.util.Collection;\nimport java.util.List;\n\n##使用宏定义实现类注释信息\n#tableComment(\"转换器\")\n@Mapper\npublic interface $!{tableName} {\n    $!{tableName} INSTANCE = Mappers.getMapper($!{tableName}.class);\n\n    $!{tableInfo.name} ofCreate($!{tableInfo.name}DTO $!tool.firstLowerCase($tableInfo.name)DTO);\n    \n    @BeanMapping(nullValuePropertyMappingStrategy = NullValuePropertyMappingStrategy.IGNORE)\n    $!{tableInfo.name} ofUpdate($!{tableInfo.name}DTO $!tool.firstLowerCase($tableInfo.name)DTO, @MappingTarget $!{tableInfo.name} $!tool.firstLowerCase($tableInfo.name));\n    \n    $!{tableInfo.name}VO ofVO($!{tableInfo.name} $!tool.firstLowerCase($tableInfo.name));\n    \n    List<$!{tableInfo.name}VO> ofListVO(Collection<$!{tableInfo.name}> $!tool.firstLowerCase($tableInfo.name)s);\n\n}"}]}},"columnConfig":{"Default":{"name":"Default","elementList":[{"title":"disable","type":"BOOLEAN","selectValue":""},{"title":"support","type":"SELECT","selectValue":"add,edit,query,del,ui"}]}},"globalConfig":{"Default":{"name":"Default","elementList":[{"name":"autoImport.vm","value":"##自动导入包（仅导入实体属性需要的包，通常用于实体类）\n#foreach($import in $importList)\nimport $!import;\n#end"},{"name":"define.vm","value":"##（Velocity宏定义）\n$!{init.vm}\n\n##定义设置表名后缀的宏定义，调用方式：#setTableSuffix(\"Test\")\n#macro(setTableSuffix $suffix)\n    #set($tableName = $!tool.append($tableInfo.name, $suffix))\n#end\n\n##定义设置包名后缀的宏定义，调用方式：#setPackageSuffix(\"Test\")\n#macro(setPackageSuffix $suffix)\n#if($suffix!=\"\")package #end#if($tableInfo.savePackageName!=\"\")$!{tableInfo.savePackageName}.#{end}$!suffix;\n#end\n\n##定义直接保存路径与文件名简化的宏定义，调用方式：#save(\"/entity\", \".java\")\n#macro(save $path $fileName)\n    $!callback.setSavePath($tool.append($tableInfo.savePath, $path))\n    $!callback.setFileName($tool.append($tableInfo.name, $fileName))\n#end\n\n##定义表注释的宏定义，调用方式：#tableComment(\"注释信息\")\n#macro(tableComment $desc)\n/**\n * $!{tableInfo.comment}($!{tableInfo.name})$desc\n *\n * @author $!author\n * @since $!time.currTime()\n */\n#end\n\n##定义GET，SET方法的宏定义，调用方式：#getSetMethod($column)\n#macro(getSetMethod $column)\n\n    public $!{tool.getClsNameByFullName($column.type)} get$!{tool.firstUpperCase($column.name)}() {\n        return $!{column.name};\n    }\n\n    public void set$!{tool.firstUpperCase($column.name)}($!{tool.getClsNameByFullName($column.type)} $!{column.name}) {\n        this.$!{column.name} = $!{column.name};\n    }\n#end"},{"name":"init.vm","value":"##初始化区域\n\n##去掉表的t_前缀\n$!tableInfo.setName($tool.getClassName($tableInfo.obj.name.replaceFirst(\"t_\",\"\")))\n\n##参考阿里巴巴开发手册，POJO 类中布尔类型的变量，都不要加 is 前缀，否则部分框架解析会引起序列化错误\n#foreach($column in $tableInfo.fullColumn)\n#if($column.name.startsWith(\"is\") && $column.type.equals(\"java.lang.Boolean\"))\n    $!column.setName($tool.firstLowerCase($column.name.substring(2)))\n#end\n#end\n\n##实现动态排除列\n#set($temp = $tool.newHashSet(\"testCreateTime\", \"otherColumn\"))\n#foreach($item in $temp)\n    #set($newList = $tool.newArrayList())\n    #foreach($column in $tableInfo.fullColumn)\n        #if($column.name!=$item)\n            ##带有反回值的方法调用时使用$tool.call来消除返回值\n            $tool.call($newList.add($column))\n        #end\n    #end\n    ##重新保存\n    $tableInfo.setFullColumn($newList)\n#end\n\n##对importList进行篡改\n#set($temp = $tool.newHashSet())\n#foreach($column in $tableInfo.fullColumn)\n    #if(!$column.type.startsWith(\"java.lang.\"))\n        ##带有反回值的方法调用时使用$tool.call来消除返回值\n        $tool.call($temp.add($column.type))\n    #end\n#end\n##覆盖\n#set($importList = $temp)"},{"name":"mybatisSupport.vm","value":"##针对Mybatis 进行支持，主要用于生成xml文件\n#foreach($column in $tableInfo.fullColumn)\n    ##储存列类型\n    $tool.call($column.ext.put(\"sqlType\", $tool.getField($column.obj.dataType, \"typeName\")))\n    #if($tool.newHashSet(\"java.lang.String\").contains($column.type))\n        #set($jdbcType=\"VARCHAR\")\n    #elseif($tool.newHashSet(\"java.lang.Boolean\", \"boolean\").contains($column.type))\n        #set($jdbcType=\"BOOLEAN\")\n    #elseif($tool.newHashSet(\"java.lang.Byte\", \"byte\").contains($column.type))\n        #set($jdbcType=\"BYTE\")\n    #elseif($tool.newHashSet(\"java.lang.Integer\", \"int\", \"java.lang.Short\", \"short\").contains($column.type))\n        #set($jdbcType=\"INTEGER\")\n    #elseif($tool.newHashSet(\"java.lang.Long\", \"long\").contains($column.type))\n        #set($jdbcType=\"INTEGER\")\n    #elseif($tool.newHashSet(\"java.lang.Float\", \"float\", \"java.lang.Double\", \"double\").contains($column.type))\n        #set($jdbcType=\"NUMERIC\")\n    #elseif($tool.newHashSet(\"java.util.Date\", \"java.sql.Timestamp\", \"java.time.Instant\", \"java.time.LocalDateTime\", \"java.time.OffsetDateTime\", \"\tjava.time.ZonedDateTime\").contains($column.type))\n        #set($jdbcType=\"TIMESTAMP\")\n    #elseif($tool.newHashSet(\"java.sql.Date\", \"java.time.LocalDate\").contains($column.type))\n        #set($jdbcType=\"TIMESTAMP\")\n    #else\n        ##其他类型\n        #set($jdbcType=\"VARCHAR\")\n    #end\n    $tool.call($column.ext.put(\"jdbcType\", $jdbcType))\n#end\n\n##定义宏，查询所有列\n#macro(allSqlColumn)#foreach($column in $tableInfo.fullColumn)$column.obj.name#if($velocityHasNext), #end#end#end\n"}]}}}